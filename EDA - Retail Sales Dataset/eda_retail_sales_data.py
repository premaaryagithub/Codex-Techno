# -*- coding: utf-8 -*-
"""EDA-Retail Sales Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a5Dc5GEjvsbV0fqAKI221xPZp75AqXFR

Data Loading ..
"""

# uploaded dataset in Google Drive , Extracting  It from Drive itself
file_id  = '1413zOs5hhtH7O6CUqMTl-jqtNs2H3l55'
download_url = f'https://drive.google.com/uc?id={file_id}&export=download'

# importing  pandas for data manipulation
import pandas as pd
data = pd.read_csv(download_url, encoding='latin-1')

#data display  for first five rows

data.head()

"""Data cleaning .


"""

#shape of dataset
display(data.shape)
print( '----------------------------------------\n')
#Data types  & null checks
display(data.info())
print( '----------------------------------------\n')
#statistics summary like mean, mode, std .. etc
display(data.describe())
print( '----------------------------------------\n')

"""From above Observation, There is No Null spaces in Dataset and All Numeric columns like Age, Quantity,Price Per Unit and Total Amount ...  are appropriate with integer Datatype

and  remaining are object which was same were seen in dataset


Except Date column which was in object type but we should convert it  into Date-Time Format

"""

#convert into data-time format
data['Date'] = pd.to_datetime(data['Date'])

display(data['Date'])
#datatype converted

#drop  duplicates
data.drop_duplicates(inplace=True)
#again check for datashape if  changes it indicates that duplicates were dropped if not it indicates there were no duplicates
data.shape

# no Duplicates
# outlier check  in numeric columns
import matplotlib.pyplot as plt
import seaborn as sns
#defining function detect outliers for numeric columns using IQR method and Boxplot for visualization
def outliers_display(data,cols= None,figsize=(12,6)):
  if cols is None:
    cols = data.select_dtypes(include='number').columns.tolist()
  for col in cols:
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lb = Q1 - 1.5 * IQR
    ub = Q3 + 1.5 * IQR
    # create a boxplot

    plt.figure(figsize=figsize)
    sns.boxplot(x=data[col])
    #boundary lines for reference
    plt.axvline(x=lb, color='r', linestyle='--',label='Lower Bound')
    plt.axvline(x=ub, color='r', linestyle='--',label='Upper Bound')
    plt.title(f'Boxplot for {col}')
    plt.legend()
    plt.show()


    outliers = data[(data[col] < lb) | (data[col] > ub)]
    print(f"Column : {col}")
    print(f"Lower Bound:{lb}, Upper Bound : {ub}")
    print(f"Number of Outliers : {len(outliers)}")
num_cols = ["Quantity","Price per Unit" , "Total Amount"]
outliers_display(data,num_cols)

# no  outliers all observations are in range  so no need to handle it
# creating additional features for time series analysis for better accuracy in predicting
data['Month'] = data['Date'].dt.month
data['Day'] = data['Date'].dt.day
data['DayOfWeek'] = data['Date'].dt.dayofweek
data['DayName'] = data['Date'].dt.day_name()
data['Quarter'] = data['Date'].dt.quarter



data.head()

"""Descriptive Statistics

"""

#for numeric datatype columns
cols = ['Age','Quantity','Price per Unit','Total Amount']
stats_data = pd.DataFrame({
    'Mean': data[cols].mean(),
    'Median': data[cols].median(),
    'Mode': data[cols].mode().iloc[0],
    'Standard Deviation': data[cols].std(),
    'Minimum': data[cols].min(),
    'Maximum': data[cols].max(),
    'Range': data[cols].max() - data[cols].min(),
    'Variance': data[cols].var(),
    'Skewness': data[cols].skew(),
    'Kurtosis': data[cols].kurtosis()
})
display(stats_data)

# handling categorical values
category_data = ['Gender','Product Category']
for col in category_data:
  display(data[col].value_counts(normalize=True) * 100)

"""Time Series Analysis :"""

#resampl(e the data to weekly and monthly freq
data.set_index('Date',inplace=True)
weekly_data = data['Total Amount'].resample('W').sum()
monthly_data = data['Total Amount'].resample('M').sum()

#plotting  sales Trends
plt.figure(figsize=(12,6))
plt.plot(weekly_data,label='Weekly Sales',color= 'royalblue')
plt.plot(monthly_data,label='Monthly Sales',color='darkorange')
plt.title('Sales Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.legend()
plt.show()

"""series decomposition:

"""

from scipy import stats
from statsmodels.tsa.seasonal import seasonal_decompose
decom = seasonal_decompose(monthly_data,model='additive',period=6)
decom.plot()
plt.tight_layout()
plt.show()

#seasonality by month

from dateutil.relativedelta import relativedelta
from datetime import datetime

monthly_stats = data.groupby('Month')['Total Amount'].sum()

monthly_stats_index = monthly_stats.index.map(lambda x : (datetime(2000, x, 1)).strftime('%b'))
ax = monthly_stats.plot(kind='bar')
ax.set_xticks(range(len(monthly_stats)))
ax.set_xticklabels(monthly_stats_index,rotation = 45 , ha ="center" )

plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Monthly Sales')
plt.show()

"""week analysis :"""

dOfweek_stats = data.groupby('DayOfWeek')['Total Amount'].sum()
dOfweek_stats_index = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']
ax = dOfweek_stats.plot(kind='bar')
ax.set_xticks(range(len(dOfweek_stats)))
ax.set_xticklabels(dOfweek_stats_index,rotation = 45 , ha ="center" )

plt.xlabel('Day of Week')
plt.ylabel('Total Sales')
plt.title('Weekly Sales')
plt.show()

"""Heatmap for weekly and monthly analysis :"""

# Create a pivot table: rows = Month, columns = Day of Week, values = total sales
heatmap_data = data.pivot_table(
    index='Month',
    columns='DayOfWeek',
    values='Total Amount',
    aggfunc='sum'
)
#setting months as rows and daysOfweek in columns
heatmap_data.index = [monthly_stats_index[m-1] for m in heatmap_data.index]
heatmap_data.columns = dOfweek_stats_index

#now plotting
plt.figure(figsize=(10, 6))
sns.heatmap(heatmap_data, annot=True, fmt=".0f", cmap='YlGnBu', linewidths=0.5, linecolor='gray')

plt.title('Sales Heatmap: Month vs Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Month')
plt.tight_layout()
plt.show()

"""customer-product analysis :"""

# Customer age analysis
age_bins = [18, 25, 35, 45, 55, 65, 100]
age_labels = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']
data['Age_Group'] = pd.cut(data['Age'], bins=age_bins, labels=age_labels, right=False)

age_group_analysis = data.groupby(['Age_Group', 'Gender']).agg({
    'Total Amount': ['count', 'sum', 'mean'],
    'Quantity': 'mean'
}).round(2)

display(age_group_analysis)


#for plotting
plot_data = data.groupby(['Age_Group', 'Gender']).agg({
    'Total Amount': ['count', 'sum', 'mean'],
    'Quantity': 'mean'
}).round(2).reset_index()

# Flatten multi-level column names
plot_data.columns = ['Age_Group', 'Gender', 'Transaction_Count', 'Total_Amount', 'Avg_Amount', 'Avg_Quantity']

# --- Visualization ---

plt.figure(figsize=(16, 12))

# 1. Transaction Count by Age Group & Gender
plt.subplot(2, 2, 1)
sns.barplot(data=plot_data, x='Age_Group', y='Transaction_Count', hue='Gender', palette='Set2')
plt.title('Number of Transactions by Age Group & Gender')
plt.xlabel('Age Group')
plt.ylabel('Transaction Count')

# 2. Total Amount Spent
plt.subplot(2, 2, 2)
sns.barplot(data=plot_data, x='Age_Group', y='Total_Amount', hue='Gender', palette='Set3')
plt.title('Total Sales Amount by Age Group & Gender')
plt.xlabel('Age Group')
plt.ylabel('Total Amount')

# 3. Average Purchase Amount
plt.subplot(2, 2, 3)
sns.barplot(data=plot_data, x='Age_Group', y='Avg_Amount', hue='Gender', palette='coolwarm')
plt.title('Average Transaction Value by Age Group & Gender')
plt.xlabel('Age Group')
plt.ylabel('Average Amount')

# 4. Average Quantity
plt.subplot(2, 2, 4)
sns.barplot(data=plot_data, x='Age_Group', y='Avg_Quantity', hue='Gender', palette='husl')
plt.title('Average Quantity per Purchase by Age Group & Gender')
plt.xlabel('Age Group')
plt.ylabel('Average Quantity')

plt.tight_layout()
plt.show()

# Product category performance
product_analysis = data.groupby('Product Category').agg({
    'Total Amount': ['sum', 'mean', 'count'],
    'Quantity': 'mean',
    'Price per Unit': 'mean'
}).sort_values(('Total Amount', 'sum'), ascending=False)
display(product_analysis)


#for plotting or visualization :
# Plotting Total Amount by Product Category
plt.figure(figsize=(10, 6))
sns.barplot(x=product_analysis.index, y=product_analysis[('Total Amount', 'sum')], palette='viridis')
plt.title('Total Sales Amount by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Amount')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Plotting the mean Quantity by Product Category
plt.figure(figsize=(10, 6))
sns.barplot(x=product_analysis.index, y=product_analysis['Quantity','mean'], palette='magma')
plt.title('Average Quantity by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Average Quantity')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Plotting the mean Price per Unit by Product Category
plt.figure(figsize=(10, 6))
sns.barplot(x=product_analysis.index, y=product_analysis['Price per Unit','mean'], palette='cividis')
plt.title('Average Price per Unit by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Average Price per Unit')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""RFM ANALYSIS:  for customer segmentation analysis ...

"""

data.head()
# here date is in index so to convert  index into column :
data = data.copy()
data['Date'] = data.index

# RFM Analysis (Recency, Frequency, Monetary)
current_date = data['Date'].max() + pd.Timedelta(days=1)
rfm = data.groupby('Customer ID').agg({
    'Date': lambda x: (current_date - x.max()).days,
    'Transaction ID': 'nunique',
    'Total Amount': 'sum'
})

rfm.rename(columns={
    'Date': 'Recency',
    'Transaction ID': 'Frequency',
    'Total Amount': 'MonetaryValue'
}, inplace=True)

# RFM scoring
rfm['R_Score'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])
rfm['F_Score'] = pd.qcut(rfm['Frequency'].rank(method='first'), 5, labels=[1, 2, 3, 4, 5])
rfm['M_Score'] = pd.qcut(rfm['MonetaryValue'], 5, labels=[1, 2, 3, 4, 5],duplicates='drop')

rfm['RFM_Score'] = rfm['R_Score'].astype(int) + rfm['F_Score'].astype(int) + rfm['M_Score'].astype(int)

print("\n Top customers based on RFM scores")
display(rfm.sort_values('RFM_Score', ascending=False).head(10))

"""visualization part:"""

# 1. Distribution of RFM Scores
plt.figure(figsize=(10, 6))
sns.histplot(rfm['RFM_Score'], bins=range(3, 16), kde=False, color='skyblue', edgecolor='black')
plt.title('Distribution of RFM Scores')
plt.xlabel('RFM Score')
plt.ylabel('Number of Customers')
plt.xticks(range(3, 16))
plt.grid(axis='y', linestyle='dotted', alpha=0.7)
plt.tight_layout()
plt.show()

# 2. Heatmap of average MonetaryValue by R and F scores
rfm_heatmap = rfm.pivot_table(
    index='F_Score', columns='R_Score', values='MonetaryValue', aggfunc='mean'
)

plt.figure(figsize=(8, 6))
sns.heatmap(rfm_heatmap, annot=True, fmt=".1f", cmap='YlGnBu')
plt.title('Average Monetary Value by R and F Scores')
plt.xlabel('Recency Score')
plt.ylabel('Frequency Score')
plt.tight_layout()
plt.show()

# 3. RFM segments: highlight best customers
rfm['Segment'] = pd.cut(
    rfm['RFM_Score'],
    bins=[2, 7, 10, 12, 15],
    labels=['Low Value', 'Mid Value', 'High Value', 'Top Customers']
)

plt.figure(figsize=(10, 6))
sns.countplot(x='Segment', data=rfm, palette='Set2', order=['Low Value', 'Mid Value', 'High Value', 'Top Customers'])
plt.title('Customer Segments by RFM Score')
plt.xlabel('Segment')
plt.ylabel('Number of Customers')
plt.grid(axis='y', linestyle='dotted', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd

# recommendations ........
data = {
    "Area": [
        "Who to Target",
        "Who to Target",
        "What to Sell",
        "What to Sell",
        "Pricing & Deals",
        "Pricing & Deals",
        "Pricing & Deals",
        "Customer Relationships",
        "Customer Relationships",
        "Customer Relationships",
        "Stock Planning",
        "Stock Planning",
        "Where to Sell",
        "Where to Sell",
        "Future Ideas",
        "Future Ideas",
        "Future Ideas"
    ],

    "Action": [
        "Run different ads for men (tech) and women (beauty)",
        "Create age-specific offers (young=trendy, older=practical)",
        "Push best-selling products harder",
        "Fix slow-selling items with discounts/bundles",
        "Offer 'buy more, save more' combos",
        "Have budget & premium price options",
        "Time big promotions with holidays",
        "Recommend products based on past buys",
        "Start a rewards program for regulars",
        "Ask customers what they like/dislike",
        "Use sales history to predict stock needs",
        "Watch for hot new trends early",
        "Keep online/offline experience smooth",
        "Boost social media & email marketing",
        "Track customer habits better",
        "Try automated marketing tools",
        "Add eco-friendly products/ads"
    ],

    "Expected Benefit": [
        "Better response from each gender",
        "More sales across age groups",
        "Make more from what already works",
        "Turn weak products into winners",
        "Customers buy more per order",
        "Attract both cheap & fancy shoppers",
        "Bigger holiday season sales",
        "Customers feel understood",
        "People come back more often",
        "Learn how to improve",
        "Right stock = no waste or shortages",
        "Beat competitors to new trends",
        "Happy customers everywhere",
        "Reach more people online",
        "Smarter ads = better results",
        "Save time, get clever ideas",
        "Appeal to green-minded buyers"
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Print in clean format
print(df.to_string(index=False))

